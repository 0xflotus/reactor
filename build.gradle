/*
 * Copyright (c) 2011-2013 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


description = 'Reactor-based application framework for the JVM.'

ext {
	gradleVersion = '1.6'
	gradleScriptDir = "${rootProject.projectDir}/gradle"

	// Languages
	groovyVersion = '2.1.5'

	// Logging
	slf4jVersion = '1.7.5'
	logbackVersion = '1.0.11'

	// Libraries
	disruptorVersion = '3.0.1'
	springVersion = '3.2.3.RELEASE'
	siVersion = '3.0.0.M2'
	nettyVersion = '4.0.0.Alpha8'
	jacksonDatabindVersion = '2.2.1'
	hadoopVersion = '1.1.2'

	// Testing
	mockitoVersion = '1.9.5'
	spockVersion = '0.7-groovy-2.0'

	// Code coverage
	jacocoVersion = '0.6.2.201302030002'
}

buildscript {
	repositories {
		maven { url 'https://repo.springsource.org/libs-release' }
		maven { url "http://repo.springsource.org/plugins-snapshot" }
	}
	dependencies {
		classpath 'org.asciidoctor:asciidoctor-gradle-plugin:0.4.1'
		classpath 'org.ajoberstar:gradle-git:0.4.0'
	}
}

apply from: "$gradleScriptDir/setup.gradle"

allprojects {
	apply plugin: 'idea'
	apply plugin: 'eclipse'

	configurations.all {
		exclude group: "commons-logging"
		exclude module: "junit"
	}

	group = 'reactor'
	repositories {
		mavenCentral()
		maven { url 'http://repo.springsource.org/libs-release' }
		maven { url 'http://repo.springsource.org/libs-milestone' }
		maven { url 'http://repo.springsource.org/plugins-release' }
		//mavenLocal()
	}
}

subprojects { subproject ->
	apply plugin: 'java'
	apply plugin: 'groovy'

	sourceCompatibility = 1.6
	targetCompatibility = 1.6

	[compileJava, compileTestJava]*.options*.compilerArgs = ["-Xlint:none", "-g"]

	sourceSets {
		test {
			resources {
				srcDirs = ['src/test/resources', 'src/test/java']
			}
		}
	}

	jar {
		manifest.attributes["Created-By"] = "${System.getProperty("java.version")} (${System.getProperty("java.specification.vendor")})"
		manifest.attributes["Implementation-Title"] = subproject.name
		manifest.attributes["Implementation-Version"] = subproject.version
	}

	task sourcesJar(type: Jar) {
		classifier = 'sources'
		from sourceSets.main.allSource
	}

	task groovydocJar(type: Jar) {
		classifier = 'groovydoc'
		from groovydoc
	}

	task javadocJar(type: Jar) {
		classifier = 'javadoc'
		from javadoc
	}

	artifacts {
		archives sourcesJar
		archives javadocJar
		archives groovydocJar
	}

	configurations {
		jacoco
	}

	// dependencies that are common across all java projects
	dependencies {
		// Logging
		compile "org.slf4j:slf4j-api:$slf4jVersion"

		// JSR-305 annotations
		compile("com.google.code.findbugs:jsr305:2.0.0", optional)

		// Groovy
		testCompile "org.codehaus.groovy:groovy-all:$groovyVersion"

		// Testing
		testCompile "org.spockframework:spock-core:$spockVersion",
				"org.hamcrest:hamcrest-library:1.3"
		testRuntime "ch.qos.logback:logback-classic:$logbackVersion"

		// Code coverage
		jacoco "org.jacoco:org.jacoco.agent:$jacocoVersion:runtime"
	}

	test {
		testLogging {
			jvmArgs "-javaagent:${configurations.jacoco.asPath}=destfile=${buildDir}/jacoco.exec,includes=reactor.*"
			events "failed"
			exceptionFormat "full"
		}
	}
}

project('reactor-core') {
	description = 'Core Reactor components'
	dependencies {

		// Type-1 UUIDs
		compile "com.eaio.uuid:uuid:3.2"

		// NonBlockingHashMap
		compile "com.github.stephenc.high-scale-lib:high-scale-lib:1.1.4"

		// High-speed Dispatching
		compile "com.lmax:disruptor:$disruptorVersion"
	}
}

project('reactor-groovy') {
	description = 'Reactor Groovy components'
	dependencies {
		compile project(':reactor-core')

		compile "org.codehaus.groovy:groovy-all:$groovyVersion"
	}
}

project('reactor-spring') {
	description = 'Reactor Spring components'

	eclipse {
		project {
			natures += 'org.springframework.ide.eclipse.core.springnature'
		}
	}

	dependencies {
		compile project(':reactor-core')

		// Spring
		compile "org.springframework:spring-beans:$springVersion",
				"org.springframework:spring-context:$springVersion",
				"org.springframework:spring-context-support:$springVersion",
				"org.springframework:spring-core:$springVersion",
				"org.springframework:spring-expression:$springVersion",
				"org.springframework:spring-tx:$springVersion"

		// Testing
		testCompile "org.spockframework:spock-spring:$spockVersion",
				"org.springframework:spring-test:$springVersion"
		testRuntime "org.slf4j:jcl-over-slf4j:$slf4jVersion"
	}
}

project('reactor-logback') {
	description = 'Disruptor-based Logback async appender implementation'
	dependencies {
		// High-speed Dispatching
		compile "com.lmax:disruptor:$disruptorVersion"

		// Logback
		compile "ch.qos.logback:logback-classic:$logbackVersion"
	}
}

project('reactor-benchmark') {
	description = 'Performance tests'
	dependencies {
		compile project(':reactor-core')
	}
}

project('reactor-tcp') {
	description = 'Reactor TCP component'
	dependencies {
		compile project(':reactor-core')

		compile "io.netty:netty:$nettyVersion"
		compile("com.fasterxml.jackson.core:jackson-databind:$jacksonDatabindVersion", optional)

		// Testing
		testCompile "org.apache.hadoop:hadoop-client:$hadoopVersion"
		testRuntime project(':reactor-logback'),
				"org.slf4j:jcl-over-slf4j:$slf4jVersion"
	}
}

import org.ajoberstar.gradle.git.tasks.*

task pullDocs(type: GitClone) {
	if (project.gradle.startParameter.offline) {
		enabled = false
	}

	def destination = file("$buildDir/wiki")

	uri = "git://github.com/reactor/reactor.wiki.git"
	destinationPath = destination
	bare = false

	doFirst {
		if (destination.exists()) {
			destination.deleteDir()
		}
	}
}

import org.asciidoctor.gradle.*

task asciidoctorHtml(type: AsciidoctorTask, dependsOn: [pullDocs]) {
	sourceDocumentName = file("$buildDir/wiki/Home.asciidoc")
	sourceDir = file("$buildDir/wiki")
	outputDir = file("$buildDir/html")
	backend = "html5"
	options = [
			attributes: [
					docinfo: '',
					toc2: '',
					imagesdir: 'images',
					stylesdir: 'stylesheets',
					stylesheet: 'golo.css',
					appversion: "$version",
					'source-highlighter': 'highlightjs'
			]
	]

	doLast {
		copy {
			from "$buildDir/wiki/images"
			into "$buildDir/html/images"
		}
		copy {
			from "$buildDir/wiki/stylesheets"
			into "$buildDir/html/stylesheets"
		}
	}
}
